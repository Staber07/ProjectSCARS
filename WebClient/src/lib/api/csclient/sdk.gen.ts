// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer, formDataBodySerializer } from './client';
import type { RequestVerificationEmailV1AuthEmailRequestPostData, RequestVerificationEmailV1AuthEmailRequestPostResponses, VerifyEmailV1AuthEmailVerifyPostData, VerifyEmailV1AuthEmailVerifyPostResponses, VerifyEmailV1AuthEmailVerifyPostErrors, RequestPasswordRecoveryV1AuthEmailRecoveryRequestPostData, RequestPasswordRecoveryV1AuthEmailRecoveryRequestPostResponses, RequestPasswordRecoveryV1AuthEmailRecoveryRequestPostErrors, ResetPasswordV1AuthEmailRecoveryResetPostData, ResetPasswordV1AuthEmailRecoveryResetPostResponses, ResetPasswordV1AuthEmailRecoveryResetPostErrors, GoogleOauthLoginV1AuthOauthGoogleLoginGetData, GoogleOauthLoginV1AuthOauthGoogleLoginGetResponses, GoogleOauthCallbackV1AuthOauthGoogleCallbackGetData, GoogleOauthCallbackV1AuthOauthGoogleCallbackGetResponses, GoogleOauthCallbackV1AuthOauthGoogleCallbackGetErrors, OauthLinkGoogleV1AuthOauthGoogleLinkGetData, OauthLinkGoogleV1AuthOauthGoogleLinkGetResponses, OauthLinkGoogleV1AuthOauthGoogleLinkGetErrors, OauthUnlinkGoogleV1AuthOauthGoogleUnlinkGetData, OauthUnlinkGoogleV1AuthOauthGoogleUnlinkGetResponses, MicrosoftOauthLoginV1AuthOauthMicrosoftLoginGetData, MicrosoftOauthLoginV1AuthOauthMicrosoftLoginGetResponses, MicrosoftOauthCallbackV1AuthOauthMicrosoftCallbackGetData, MicrosoftOauthCallbackV1AuthOauthMicrosoftCallbackGetResponses, FacebookOauthLoginV1AuthOauthFacebookLoginGetData, FacebookOauthLoginV1AuthOauthFacebookLoginGetResponses, FacebookOauthCallbackV1AuthOauthFacebookCallbackGetData, FacebookOauthCallbackV1AuthOauthFacebookCallbackGetResponses, GenerateMfaOtpV1AuthMfaOtpGeneratePostData, GenerateMfaOtpV1AuthMfaOtpGeneratePostResponses, VerifyMfaOtpV1AuthMfaOtpVerifyPostData, VerifyMfaOtpV1AuthMfaOtpVerifyPostResponses, VerifyMfaOtpV1AuthMfaOtpVerifyPostErrors, ValidateMfaOtpV1AuthMfaOtpValidatePostData, ValidateMfaOtpV1AuthMfaOtpValidatePostResponses, ValidateMfaOtpV1AuthMfaOtpValidatePostErrors, MfaOtpRecoveryV1AuthMfaOtpRecoveryPostData, MfaOtpRecoveryV1AuthMfaOtpRecoveryPostResponses, MfaOtpRecoveryV1AuthMfaOtpRecoveryPostErrors, DisableMfaOtpV1AuthMfaOtpDisablePostData, DisableMfaOtpV1AuthMfaOtpDisablePostResponses, CreateNewUserV1AuthCreatePostData, CreateNewUserV1AuthCreatePostResponses, CreateNewUserV1AuthCreatePostErrors, RequestAccessTokenV1AuthLoginPostData, RequestAccessTokenV1AuthLoginPostResponses, RequestAccessTokenV1AuthLoginPostErrors, RefreshAccessTokenV1AuthRefreshPostData, RefreshAccessTokenV1AuthRefreshPostResponses, RefreshAccessTokenV1AuthRefreshPostErrors, InviteUserV1AuthInvitePostData, InviteUserV1AuthInvitePostResponses, InviteUserV1AuthInvitePostErrors, GetAllRolesV1AuthRolesGetData, GetAllRolesV1AuthRolesGetResponses, GetOauthConfigV1AuthConfigOauthGetData, GetOauthConfigV1AuthConfigOauthGetResponses, GetUsersQuantityEndpointV1UsersQuantityGetData, GetUsersQuantityEndpointV1UsersQuantityGetResponses, GetUserProfileEndpointV1UsersMeGetData, GetUserProfileEndpointV1UsersMeGetResponses, GetAllUsersEndpointV1UsersAllGetData, GetAllUsersEndpointV1UsersAllGetResponses, GetAllUsersEndpointV1UsersAllGetErrors, DeleteUserInfoEndpointV1UsersDeleteData, DeleteUserInfoEndpointV1UsersDeleteResponses, DeleteUserInfoEndpointV1UsersDeleteErrors, GetUserEndpointV1UsersGetData, GetUserEndpointV1UsersGetResponses, GetUserEndpointV1UsersGetErrors, UpdateUserEndpointV1UsersPatchData, UpdateUserEndpointV1UsersPatchResponses, UpdateUserEndpointV1UsersPatchErrors, DeleteUserAvatarEndpointV1UsersAvatarDeleteData, DeleteUserAvatarEndpointV1UsersAvatarDeleteResponses, DeleteUserAvatarEndpointV1UsersAvatarDeleteErrors, GetUserAvatarEndpointV1UsersAvatarGetData, GetUserAvatarEndpointV1UsersAvatarGetResponses, GetUserAvatarEndpointV1UsersAvatarGetErrors, UpdateUserAvatarEndpointV1UsersAvatarPatchData, UpdateUserAvatarEndpointV1UsersAvatarPatchResponses, UpdateUserAvatarEndpointV1UsersAvatarPatchErrors, DeleteUserSignatureEndpointV1UsersSignatureDeleteData, DeleteUserSignatureEndpointV1UsersSignatureDeleteResponses, DeleteUserSignatureEndpointV1UsersSignatureDeleteErrors, GetUserSignatureEndpointV1UsersSignatureGetData, GetUserSignatureEndpointV1UsersSignatureGetResponses, GetUserSignatureEndpointV1UsersSignatureGetErrors, UpdateUserSignatureEndpointV1UsersSignaturePatchData, UpdateUserSignatureEndpointV1UsersSignaturePatchResponses, UpdateUserSignatureEndpointV1UsersSignaturePatchErrors, GetUsersSimpleEndpointV1UsersSimpleGetData, GetUsersSimpleEndpointV1UsersSimpleGetResponses, GetUsersSimpleEndpointV1UsersSimpleGetErrors, GetUserLastModifiedEndpointV1UsersMeLastModifiedGetData, GetUserLastModifiedEndpointV1UsersMeLastModifiedGetResponses, ChangeUserPasswordEndpointV1UsersMePasswordPatchData, ChangeUserPasswordEndpointV1UsersMePasswordPatchResponses, ChangeUserPasswordEndpointV1UsersMePasswordPatchErrors, CreateSchoolEndpointV1SchoolsCreatePostData, CreateSchoolEndpointV1SchoolsCreatePostResponses, CreateSchoolEndpointV1SchoolsCreatePostErrors, GetSchoolsQuantityEndpointV1SchoolsQuantityGetData, GetSchoolsQuantityEndpointV1SchoolsQuantityGetResponses, GetAssignedSchoolsEndpointV1SchoolsMeGetData, GetAssignedSchoolsEndpointV1SchoolsMeGetResponses, GetAllSchoolsEndpointV1SchoolsAllGetData, GetAllSchoolsEndpointV1SchoolsAllGetResponses, GetAllSchoolsEndpointV1SchoolsAllGetErrors, DeleteSchoolInfoEndpointV1SchoolsDeleteData, DeleteSchoolInfoEndpointV1SchoolsDeleteResponses, DeleteSchoolInfoEndpointV1SchoolsDeleteErrors, GetSchoolEndpointV1SchoolsGetData, GetSchoolEndpointV1SchoolsGetResponses, GetSchoolEndpointV1SchoolsGetErrors, UpdateSchoolEndpointV1SchoolsPatchData, UpdateSchoolEndpointV1SchoolsPatchResponses, UpdateSchoolEndpointV1SchoolsPatchErrors, DeleteSchoolLogoV1SchoolsLogoDeleteData, DeleteSchoolLogoV1SchoolsLogoDeleteResponses, DeleteSchoolLogoV1SchoolsLogoDeleteErrors, GetSchoolLogoEndpointV1SchoolsLogoGetData, GetSchoolLogoEndpointV1SchoolsLogoGetResponses, GetSchoolLogoEndpointV1SchoolsLogoGetErrors, PatchSchoolLogoV1SchoolsLogoPatchData, PatchSchoolLogoV1SchoolsLogoPatchResponses, PatchSchoolLogoV1SchoolsLogoPatchErrors, GetNotificationQuantityV1NotificationsQuantityGetData, GetNotificationQuantityV1NotificationsQuantityGetResponses, GetNotificationQuantityV1NotificationsQuantityGetErrors, GetNotificationV1NotificationsGetData, GetNotificationV1NotificationsGetResponses, GetNotificationV1NotificationsGetErrors, ArchiveNotificationV1NotificationsPostData, ArchiveNotificationV1NotificationsPostResponses, ArchiveNotificationV1NotificationsPostErrors, GetUserNotificationsV1NotificationsMeGetData, GetUserNotificationsV1NotificationsMeGetResponses, GetUserNotificationsV1NotificationsMeGetErrors, GetAllSchoolMonthlyReportsV1ReportsMonthlySchoolIdGetData, GetAllSchoolMonthlyReportsV1ReportsMonthlySchoolIdGetResponses, GetAllSchoolMonthlyReportsV1ReportsMonthlySchoolIdGetErrors, DeleteSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthDeleteData, DeleteSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthDeleteResponses, DeleteSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthDeleteErrors, GetSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthGetData, GetSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthGetResponses, GetSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthGetErrors, CreateSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthPatchData, CreateSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthPatchResponses, CreateSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthPatchErrors, ChangeMonthlyReportStatusV1ReportsMonthlySchoolIdYearMonthStatusPatchData, ChangeMonthlyReportStatusV1ReportsMonthlySchoolIdYearMonthStatusPatchResponses, ChangeMonthlyReportStatusV1ReportsMonthlySchoolIdYearMonthStatusPatchErrors, GetValidStatusTransitionsV1ReportsMonthlySchoolIdYearMonthValidTransitionsGetData, GetValidStatusTransitionsV1ReportsMonthlySchoolIdYearMonthValidTransitionsGetResponses, GetValidStatusTransitionsV1ReportsMonthlySchoolIdYearMonthValidTransitionsGetErrors, DeleteSchoolDailyReportV1ReportsDailySchoolIdYearMonthDeleteData, DeleteSchoolDailyReportV1ReportsDailySchoolIdYearMonthDeleteResponses, DeleteSchoolDailyReportV1ReportsDailySchoolIdYearMonthDeleteErrors, GetSchoolDailyReportV1ReportsDailySchoolIdYearMonthGetData, GetSchoolDailyReportV1ReportsDailySchoolIdYearMonthGetResponses, GetSchoolDailyReportV1ReportsDailySchoolIdYearMonthGetErrors, CreateSchoolDailyReportV1ReportsDailySchoolIdYearMonthPatchData, CreateSchoolDailyReportV1ReportsDailySchoolIdYearMonthPatchResponses, CreateSchoolDailyReportV1ReportsDailySchoolIdYearMonthPatchErrors, CreateSchoolDailyFinancialReportV1ReportsDailySchoolIdYearMonthPutData, CreateSchoolDailyFinancialReportV1ReportsDailySchoolIdYearMonthPutResponses, CreateSchoolDailyFinancialReportV1ReportsDailySchoolIdYearMonthPutErrors, GetSchoolDailyReportEntriesV1ReportsDailySchoolIdYearMonthEntriesGetData, GetSchoolDailyReportEntriesV1ReportsDailySchoolIdYearMonthEntriesGetResponses, GetSchoolDailyReportEntriesV1ReportsDailySchoolIdYearMonthEntriesGetErrors, CreateDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesPostData, CreateDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesPostResponses, CreateDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesPostErrors, DeleteDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayDeleteData, DeleteDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayDeleteResponses, DeleteDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayDeleteErrors, GetDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayGetData, GetDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayGetResponses, GetDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayGetErrors, UpdateSchoolDailyReportEntryLegacyV1ReportsDailySchoolIdYearMonthEntriesDayPatchData, UpdateSchoolDailyReportEntryLegacyV1ReportsDailySchoolIdYearMonthEntriesDayPatchResponses, UpdateSchoolDailyReportEntryLegacyV1ReportsDailySchoolIdYearMonthEntriesDayPatchErrors, UpdateDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayPutData, UpdateDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayPutResponses, UpdateDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayPutErrors, GetSchoolDailyFinancialReportsV1ReportsDailySchoolIdGetData, GetSchoolDailyFinancialReportsV1ReportsDailySchoolIdGetResponses, GetSchoolDailyFinancialReportsV1ReportsDailySchoolIdGetErrors, GetSchoolDailyFinancialReportWithEntriesV1ReportsDailySchoolIdYearMonthFullGetData, GetSchoolDailyFinancialReportWithEntriesV1ReportsDailySchoolIdYearMonthFullGetResponses, GetSchoolDailyFinancialReportWithEntriesV1ReportsDailySchoolIdYearMonthFullGetErrors, CreateBulkDailySalesAndPurchasesEntriesV1ReportsDailySchoolIdYearMonthEntriesBulkPostData, CreateBulkDailySalesAndPurchasesEntriesV1ReportsDailySchoolIdYearMonthEntriesBulkPostResponses, CreateBulkDailySalesAndPurchasesEntriesV1ReportsDailySchoolIdYearMonthEntriesBulkPostErrors, GetDailySalesAndPurchasesSummaryV1ReportsDailySchoolIdYearMonthSummaryGetData, GetDailySalesAndPurchasesSummaryV1ReportsDailySchoolIdYearMonthSummaryGetResponses, GetDailySalesAndPurchasesSummaryV1ReportsDailySchoolIdYearMonthSummaryGetErrors, GetDailySalesAndPurchasesSummaryFilteredV1ReportsDailySchoolIdYearMonthSummaryFilteredGetData, GetDailySalesAndPurchasesSummaryFilteredV1ReportsDailySchoolIdYearMonthSummaryFilteredGetResponses, GetDailySalesAndPurchasesSummaryFilteredV1ReportsDailySchoolIdYearMonthSummaryFilteredGetErrors, ChangeDailyReportStatusV1ReportsDailySchoolIdYearMonthStatusPatchData, ChangeDailyReportStatusV1ReportsDailySchoolIdYearMonthStatusPatchResponses, ChangeDailyReportStatusV1ReportsDailySchoolIdYearMonthStatusPatchErrors, GetDailyValidStatusTransitionsV1ReportsDailySchoolIdYearMonthValidTransitionsGetData, GetDailyValidStatusTransitionsV1ReportsDailySchoolIdYearMonthValidTransitionsGetResponses, GetDailyValidStatusTransitionsV1ReportsDailySchoolIdYearMonthValidTransitionsGetErrors, DeleteSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthDeleteData, DeleteSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthDeleteResponses, DeleteSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthDeleteErrors, GetSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthGetData, GetSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthGetResponses, GetSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthGetErrors, CreateSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthPatchData, CreateSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthPatchResponses, CreateSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthPatchErrors, UpdatePayrollReportV1ReportsPayrollSchoolIdYearMonthPutData, UpdatePayrollReportV1ReportsPayrollSchoolIdYearMonthPutResponses, UpdatePayrollReportV1ReportsPayrollSchoolIdYearMonthPutErrors, GetSchoolPayrollReportEntriesV1ReportsPayrollSchoolIdYearMonthEntriesGetData, GetSchoolPayrollReportEntriesV1ReportsPayrollSchoolIdYearMonthEntriesGetResponses, GetSchoolPayrollReportEntriesV1ReportsPayrollSchoolIdYearMonthEntriesGetErrors, CreatePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesPostData, CreatePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesPostResponses, CreatePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesPostErrors, CreateBulkPayrollReportEntriesV1ReportsPayrollSchoolIdYearMonthEntriesBulkPostData, CreateBulkPayrollReportEntriesV1ReportsPayrollSchoolIdYearMonthEntriesBulkPostResponses, CreateBulkPayrollReportEntriesV1ReportsPayrollSchoolIdYearMonthEntriesBulkPostErrors, DeletePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesWeekNumberEmployeeNameDeleteData, DeletePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesWeekNumberEmployeeNameDeleteResponses, DeletePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesWeekNumberEmployeeNameDeleteErrors, UpdatePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesWeekNumberEmployeeNamePutData, UpdatePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesWeekNumberEmployeeNamePutResponses, UpdatePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesWeekNumberEmployeeNamePutErrors, ChangePayrollReportStatusV1ReportsPayrollSchoolIdYearMonthStatusPatchData, ChangePayrollReportStatusV1ReportsPayrollSchoolIdYearMonthStatusPatchResponses, ChangePayrollReportStatusV1ReportsPayrollSchoolIdYearMonthStatusPatchErrors, GetPayrollValidStatusTransitionsV1ReportsPayrollSchoolIdYearMonthValidTransitionsGetData, GetPayrollValidStatusTransitionsV1ReportsPayrollSchoolIdYearMonthValidTransitionsGetResponses, GetPayrollValidStatusTransitionsV1ReportsPayrollSchoolIdYearMonthValidTransitionsGetErrors, DeleteLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryDeleteData, DeleteLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryDeleteResponses, DeleteLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryDeleteErrors, GetLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryGetData, GetLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryGetResponses, GetLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryGetErrors, CreateOrUpdateLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryPatchData, CreateOrUpdateLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryPatchResponses, CreateOrUpdateLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryPatchErrors, GetLiquidationReportEntriesV1ReportsLiquidationSchoolIdYearMonthCategoryEntriesGetData, GetLiquidationReportEntriesV1ReportsLiquidationSchoolIdYearMonthCategoryEntriesGetResponses, GetLiquidationReportEntriesV1ReportsLiquidationSchoolIdYearMonthCategoryEntriesGetErrors, UpdateLiquidationReportEntriesV1ReportsLiquidationSchoolIdYearMonthCategoryEntriesPutData, UpdateLiquidationReportEntriesV1ReportsLiquidationSchoolIdYearMonthCategoryEntriesPutResponses, UpdateLiquidationReportEntriesV1ReportsLiquidationSchoolIdYearMonthCategoryEntriesPutErrors, GetLiquidationCategoriesV1ReportsLiquidationCategoriesGetData, GetLiquidationCategoriesV1ReportsLiquidationCategoriesGetResponses, ChangeLiquidationReportStatusV1ReportsLiquidationSchoolIdYearMonthCategoryStatusPatchData, ChangeLiquidationReportStatusV1ReportsLiquidationSchoolIdYearMonthCategoryStatusPatchResponses, ChangeLiquidationReportStatusV1ReportsLiquidationSchoolIdYearMonthCategoryStatusPatchErrors, GetLiquidationValidStatusTransitionsV1ReportsLiquidationSchoolIdYearMonthCategoryValidTransitionsGetData, GetLiquidationValidStatusTransitionsV1ReportsLiquidationSchoolIdYearMonthCategoryValidTransitionsGetResponses, GetLiquidationValidStatusTransitionsV1ReportsLiquidationSchoolIdYearMonthCategoryValidTransitionsGetErrors, UploadAttachmentEndpointV1ReportsAttachmentsUploadPostData, UploadAttachmentEndpointV1ReportsAttachmentsUploadPostResponses, UploadAttachmentEndpointV1ReportsAttachmentsUploadPostErrors, DeleteAttachmentEndpointV1ReportsAttachmentsFileUrnDeleteData, DeleteAttachmentEndpointV1ReportsAttachmentsFileUrnDeleteResponses, DeleteAttachmentEndpointV1ReportsAttachmentsFileUrnDeleteErrors, GetAttachmentEndpointV1ReportsAttachmentsFileUrnGetData, GetAttachmentEndpointV1ReportsAttachmentsFileUrnGetResponses, GetAttachmentEndpointV1ReportsAttachmentsFileUrnGetErrors, GetAttachmentsMetadataEndpointV1ReportsAttachmentsMetadataPostData, GetAttachmentsMetadataEndpointV1ReportsAttachmentsMetadataPostResponses, GetAttachmentsMetadataEndpointV1ReportsAttachmentsMetadataPostErrors, RootV1HealthcheckGetData, RootV1HealthcheckGetResponses, GetServerConfigV1AdminConfigGetData, GetServerConfigV1AdminConfigGetResponses, UpdateServerConfigV1AdminConfigPutData, UpdateServerConfigV1AdminConfigPutResponses, UpdateServerConfigV1AdminConfigPutErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Request Verification Email
 * Send a verification email to a user.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 *
 * Returns:
 * A message indicating the success of the operation.
 *
 * Raises:
 * HTTPException: If the token is invalid or expired.
 */
export const requestVerificationEmailV1AuthEmailRequestPost = <ThrowOnError extends boolean = false>(options?: Options<RequestVerificationEmailV1AuthEmailRequestPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RequestVerificationEmailV1AuthEmailRequestPostResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/email/request',
        ...options
    });
};

/**
 * Verify Email
 * Verify a user's email address using a verification token.
 *
 * Args:
 * token: The verification token.
 * session: The database session.
 *
 * Returns:
 * A message indicating the success of the operation.
 *
 * Raises:
 * HTTPException: If the token is invalid or expired.
 */
export const verifyEmailV1AuthEmailVerifyPost = <ThrowOnError extends boolean = false>(options: Options<VerifyEmailV1AuthEmailVerifyPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyEmailV1AuthEmailVerifyPostResponses, VerifyEmailV1AuthEmailVerifyPostErrors, ThrowOnError>({
        url: '/v1/auth/email/verify',
        ...options
    });
};

/**
 * Request Password Recovery
 * Request a password recovery for a user.
 *
 * Args:
 * username: The username of the user.
 * email: The email address of the user.
 * session: The database session.
 */
export const requestPasswordRecoveryV1AuthEmailRecoveryRequestPost = <ThrowOnError extends boolean = false>(options: Options<RequestPasswordRecoveryV1AuthEmailRecoveryRequestPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RequestPasswordRecoveryV1AuthEmailRecoveryRequestPostResponses, RequestPasswordRecoveryV1AuthEmailRecoveryRequestPostErrors, ThrowOnError>({
        url: '/v1/auth/email/recovery/request',
        ...options
    });
};

/**
 * Reset Password
 * Reset a user's password using a recovery token.
 *
 * Args:
 * token: The recovery token.
 * new_password: The new password for the user.
 * session: The database session.
 *
 * Returns:
 * A message indicating the success of the operation.
 */
export const resetPasswordV1AuthEmailRecoveryResetPost = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordV1AuthEmailRecoveryResetPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetPasswordV1AuthEmailRecoveryResetPostResponses, ResetPasswordV1AuthEmailRecoveryResetPostErrors, ThrowOnError>({
        url: '/v1/auth/email/recovery/reset',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Google Oauth Login
 * Handle Google OAuth login.
 */
export const googleOauthLoginV1AuthOauthGoogleLoginGet = <ThrowOnError extends boolean = false>(options?: Options<GoogleOauthLoginV1AuthOauthGoogleLoginGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GoogleOauthLoginV1AuthOauthGoogleLoginGetResponses, unknown, ThrowOnError>({
        url: '/v1/auth/oauth/google/login',
        ...options
    });
};

/**
 * Google Oauth Callback
 * Handle Google OAuth callback.
 */
export const googleOauthCallbackV1AuthOauthGoogleCallbackGet = <ThrowOnError extends boolean = false>(options: Options<GoogleOauthCallbackV1AuthOauthGoogleCallbackGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GoogleOauthCallbackV1AuthOauthGoogleCallbackGetResponses, GoogleOauthCallbackV1AuthOauthGoogleCallbackGetErrors, ThrowOnError>({
        url: '/v1/auth/oauth/google/callback',
        ...options
    });
};

/**
 * Oauth Link Google
 * Link a Google account for OAuth.
 */
export const oauthLinkGoogleV1AuthOauthGoogleLinkGet = <ThrowOnError extends boolean = false>(options: Options<OauthLinkGoogleV1AuthOauthGoogleLinkGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OauthLinkGoogleV1AuthOauthGoogleLinkGetResponses, OauthLinkGoogleV1AuthOauthGoogleLinkGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/oauth/google/link',
        ...options
    });
};

/**
 * Oauth Unlink Google
 * Unlink a Google account from the user's profile.
 */
export const oauthUnlinkGoogleV1AuthOauthGoogleUnlinkGet = <ThrowOnError extends boolean = false>(options?: Options<OauthUnlinkGoogleV1AuthOauthGoogleUnlinkGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OauthUnlinkGoogleV1AuthOauthGoogleUnlinkGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/oauth/google/unlink',
        ...options
    });
};

/**
 * Microsoft Oauth Login
 * Handle Microsoft OAuth login.
 */
export const microsoftOauthLoginV1AuthOauthMicrosoftLoginGet = <ThrowOnError extends boolean = false>(options?: Options<MicrosoftOauthLoginV1AuthOauthMicrosoftLoginGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MicrosoftOauthLoginV1AuthOauthMicrosoftLoginGetResponses, unknown, ThrowOnError>({
        url: '/v1/auth/oauth/microsoft/login',
        ...options
    });
};

/**
 * Microsoft Oauth Callback
 * Handle Microsoft OAuth callback.
 */
export const microsoftOauthCallbackV1AuthOauthMicrosoftCallbackGet = <ThrowOnError extends boolean = false>(options?: Options<MicrosoftOauthCallbackV1AuthOauthMicrosoftCallbackGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MicrosoftOauthCallbackV1AuthOauthMicrosoftCallbackGetResponses, unknown, ThrowOnError>({
        url: '/v1/auth/oauth/microsoft/callback',
        ...options
    });
};

/**
 * Facebook Oauth Login
 * Handle Facebook OAuth login.
 */
export const facebookOauthLoginV1AuthOauthFacebookLoginGet = <ThrowOnError extends boolean = false>(options?: Options<FacebookOauthLoginV1AuthOauthFacebookLoginGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FacebookOauthLoginV1AuthOauthFacebookLoginGetResponses, unknown, ThrowOnError>({
        url: '/v1/auth/oauth/facebook/login',
        ...options
    });
};

/**
 * Facebook Oauth Callback
 * Handle Facebook OAuth callback.
 */
export const facebookOauthCallbackV1AuthOauthFacebookCallbackGet = <ThrowOnError extends boolean = false>(options?: Options<FacebookOauthCallbackV1AuthOauthFacebookCallbackGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FacebookOauthCallbackV1AuthOauthFacebookCallbackGetResponses, unknown, ThrowOnError>({
        url: '/v1/auth/oauth/facebook/callback',
        ...options
    });
};

/**
 * Generate Mfa Otp
 * Generate a new OTP secret for MFA (Multi-Factor Authentication).
 */
export const generateMfaOtpV1AuthMfaOtpGeneratePost = <ThrowOnError extends boolean = false>(options?: Options<GenerateMfaOtpV1AuthMfaOtpGeneratePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GenerateMfaOtpV1AuthMfaOtpGeneratePostResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/mfa/otp/generate',
        ...options
    });
};

/**
 * Verify Mfa Otp
 * Verify the user's OTP for Multi-Factor Authentication.
 */
export const verifyMfaOtpV1AuthMfaOtpVerifyPost = <ThrowOnError extends boolean = false>(options: Options<VerifyMfaOtpV1AuthMfaOtpVerifyPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyMfaOtpV1AuthMfaOtpVerifyPostResponses, VerifyMfaOtpV1AuthMfaOtpVerifyPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/mfa/otp/verify',
        ...options
    });
};

/**
 * Validate Mfa Otp
 * Validate the user's OTP for Multi-Factor Authentication.
 */
export const validateMfaOtpV1AuthMfaOtpValidatePost = <ThrowOnError extends boolean = false>(options: Options<ValidateMfaOtpV1AuthMfaOtpValidatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ValidateMfaOtpV1AuthMfaOtpValidatePostResponses, ValidateMfaOtpV1AuthMfaOtpValidatePostErrors, ThrowOnError>({
        url: '/v1/auth/mfa/otp/validate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mfa Otp Recovery
 * Recover access using the OTP recovery code for Multi-Factor Authentication.
 */
export const mfaOtpRecoveryV1AuthMfaOtpRecoveryPost = <ThrowOnError extends boolean = false>(options: Options<MfaOtpRecoveryV1AuthMfaOtpRecoveryPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MfaOtpRecoveryV1AuthMfaOtpRecoveryPostResponses, MfaOtpRecoveryV1AuthMfaOtpRecoveryPostErrors, ThrowOnError>({
        url: '/v1/auth/mfa/otp/recovery',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Disable Mfa Otp
 * Disable the user's OTP for Multi-Factor Authentication.
 */
export const disableMfaOtpV1AuthMfaOtpDisablePost = <ThrowOnError extends boolean = false>(options?: Options<DisableMfaOtpV1AuthMfaOtpDisablePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<DisableMfaOtpV1AuthMfaOtpDisablePostResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/mfa/otp/disable',
        ...options
    });
};

/**
 * Create New User
 * Create a new user in the database.
 *
 * Args:
 * new_user: The new user's information.
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 *
 * Returns:
 * A newly created user object.
 */
export const createNewUserV1AuthCreatePost = <ThrowOnError extends boolean = false>(options: Options<CreateNewUserV1AuthCreatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNewUserV1AuthCreatePostResponses, CreateNewUserV1AuthCreatePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request Access Token
 * Get an access token for a user, and optionally a refresh token if 'Remember Me' is enabled.
 *
 * Args:
 * data: The data from the OAuth2 password request form.
 * session: The database session.
 * request: The HTTP request object.
 * background_tasks: Background tasks to run after the request is processed.
 * remember_me: Whether to remember the user on this device.
 *
 * Returns:
 * A dictionary containing the access token, and optionally the refresh token.
 *
 * Raises:
 * HTTPException: If the user cannot be authenticated.
 */
export const requestAccessTokenV1AuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<RequestAccessTokenV1AuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RequestAccessTokenV1AuthLoginPostResponses, RequestAccessTokenV1AuthLoginPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/v1/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Refresh Access Token
 * Refresh the access token for the user.
 *
 * This endpoint is used to refresh the access token when it has expired.
 * It requires a valid refresh token to be provided in the request.
 *
 * Args:
 * refresh_token: The refresh token to validate.
 * session: The database session.
 *
 * Returns:
 * A new JWTToken containing the refreshed access token and optionally a new refresh token.
 */
export const refreshAccessTokenV1AuthRefreshPost = <ThrowOnError extends boolean = false>(options: Options<RefreshAccessTokenV1AuthRefreshPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RefreshAccessTokenV1AuthRefreshPostResponses, RefreshAccessTokenV1AuthRefreshPostErrors, ThrowOnError>({
        url: '/v1/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Invite User
 * Invite a new user to the system.
 *
 * Args:
 * new_user: The new user's information.
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 *
 * Returns:
 * A newly created user object.
 */
export const inviteUserV1AuthInvitePost = <ThrowOnError extends boolean = false>(options: Options<InviteUserV1AuthInvitePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InviteUserV1AuthInvitePostResponses, InviteUserV1AuthInvitePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/invite',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get All Roles
 * Get all roles in the database.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 *
 * Returns:
 * A list of all roles in the database.
 */
export const getAllRolesV1AuthRolesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllRolesV1AuthRolesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllRolesV1AuthRolesGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/roles',
        ...options
    });
};

/**
 * Get Oauth Config
 * Get the OAuth configuration status.
 */
export const getOauthConfigV1AuthConfigOauthGet = <ThrowOnError extends boolean = false>(options?: Options<GetOauthConfigV1AuthConfigOauthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOauthConfigV1AuthConfigOauthGetResponses, unknown, ThrowOnError>({
        url: '/v1/auth/config/oauth',
        ...options
    });
};

/**
 * Get Users Quantity Endpoint
 * Get the total number of users in the system.
 *
 * Args:
 * token: The access token of the logged-in user.
 * session: The session to the database.
 *
 * Returns:
 * The total number of users.
 */
export const getUsersQuantityEndpointV1UsersQuantityGet = <ThrowOnError extends boolean = false>(options?: Options<GetUsersQuantityEndpointV1UsersQuantityGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersQuantityEndpointV1UsersQuantityGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/quantity',
        ...options
    });
};

/**
 * Get User Profile Endpoint
 * Get the logged-in user's profile information.
 *
 * Args:
 * token: The access token of the logged-in user.
 * session: The session to the database.
 *
 * Returns:
 * The user's profile information together with their permissions.
 */
export const getUserProfileEndpointV1UsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserProfileEndpointV1UsersMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserProfileEndpointV1UsersMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/me',
        ...options
    });
};

/**
 * Get All Users Endpoint
 * Get all users and their information.
 *
 * Args:
 * token: The access token of the logged-in user.
 * session: The session to the database.
 * limit: The maximum number of users to return (default is 25).
 * offset: The number of users to skip (default is 0).
 * show_all: If True, include deactivated users.
 *
 * Returns:
 * A list of users and their information.
 */
export const getAllUsersEndpointV1UsersAllGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllUsersEndpointV1UsersAllGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllUsersEndpointV1UsersAllGetResponses, GetAllUsersEndpointV1UsersAllGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/all',
        ...options
    });
};

/**
 * Delete User Info Endpoint
 * Delete a user's profile information.
 *
 * Args:
 * user_info: The user information to delete.
 * token: The access token of the logged-in user.
 * session: The session to the database.
 */
export const deleteUserInfoEndpointV1UsersDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserInfoEndpointV1UsersDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserInfoEndpointV1UsersDeleteResponses, DeleteUserInfoEndpointV1UsersDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get User Endpoint
 * Get the information of a specific user.
 *
 * Args:
 * user_id: The ID of the user to fetch.
 * token: The access token of the logged-in user.
 * session: The session to the database.
 *
 * Returns:
 * The user's information.
 */
export const getUserEndpointV1UsersGet = <ThrowOnError extends boolean = false>(options: Options<GetUserEndpointV1UsersGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserEndpointV1UsersGetResponses, GetUserEndpointV1UsersGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/',
        ...options
    });
};

/**
 * Update User Endpoint
 * Update a user's profile information.
 *
 * Args:
 * token: The access token of the logged-in user.
 * session: The session to the database.
 */
export const updateUserEndpointV1UsersPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateUserEndpointV1UsersPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateUserEndpointV1UsersPatchResponses, UpdateUserEndpointV1UsersPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete User Avatar Endpoint
 * Delete a user's avatar.
 *
 * Args:
 * user_id: The ID of the user to update.
 * token: The access token of the logged-in user.
 * session: The session to the database.
 */
export const deleteUserAvatarEndpointV1UsersAvatarDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserAvatarEndpointV1UsersAvatarDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserAvatarEndpointV1UsersAvatarDeleteResponses, DeleteUserAvatarEndpointV1UsersAvatarDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/avatar',
        ...options
    });
};

/**
 * Get User Avatar Endpoint
 * Get the user's profile picture.
 *
 * Args:
 * fn: The name of the user's avatar.
 * token: The access token of the logged-in user.
 * session: The session to the database.
 *
 * Returns:
 * The user's avatar image.
 */
export const getUserAvatarEndpointV1UsersAvatarGet = <ThrowOnError extends boolean = false>(options: Options<GetUserAvatarEndpointV1UsersAvatarGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserAvatarEndpointV1UsersAvatarGetResponses, GetUserAvatarEndpointV1UsersAvatarGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/avatar',
        ...options
    });
};

/**
 * Update User Avatar Endpoint
 * Update a user's avatar.
 *
 * Args:
 * user_id: The ID of the user to update.
 * img: The new avatar image.
 * token: The access token of the logged-in user.
 * session: The session to the database.
 *
 * Returns:
 * The updated user information.
 */
export const updateUserAvatarEndpointV1UsersAvatarPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateUserAvatarEndpointV1UsersAvatarPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateUserAvatarEndpointV1UsersAvatarPatchResponses, UpdateUserAvatarEndpointV1UsersAvatarPatchErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/avatar',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Delete User Signature Endpoint
 * Delete a user's e-signature.
 *
 * Args:
 * user_id: The ID of the user to update.
 * token: The access token of the logged-in user.
 * session: The session to the database.
 */
export const deleteUserSignatureEndpointV1UsersSignatureDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserSignatureEndpointV1UsersSignatureDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserSignatureEndpointV1UsersSignatureDeleteResponses, DeleteUserSignatureEndpointV1UsersSignatureDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/signature',
        ...options
    });
};

/**
 * Get User Signature Endpoint
 * Get the user's e-signature.
 *
 * Args:
 * fn: The name of the user's e-signature.
 * token: The access token of the logged-in user.
 * session: The session to the database.
 *
 * Returns:
 * The user's e-signature.
 */
export const getUserSignatureEndpointV1UsersSignatureGet = <ThrowOnError extends boolean = false>(options: Options<GetUserSignatureEndpointV1UsersSignatureGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserSignatureEndpointV1UsersSignatureGetResponses, GetUserSignatureEndpointV1UsersSignatureGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/signature',
        ...options
    });
};

/**
 * Update User Signature Endpoint
 * Update a user's e-signature.
 *
 * Args:
 * user_id: The ID of the user to update.
 * img: The new e-signature image.
 * token: The access token of the logged-in user.
 * session: The session to the database.
 *
 * Returns:
 * The updated user information.
 */
export const updateUserSignatureEndpointV1UsersSignaturePatch = <ThrowOnError extends boolean = false>(options: Options<UpdateUserSignatureEndpointV1UsersSignaturePatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateUserSignatureEndpointV1UsersSignaturePatchResponses, UpdateUserSignatureEndpointV1UsersSignaturePatchErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/signature',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get Users Simple Endpoint
 * Get simplified user information for use in reports and signature selection.
 *
 * Returns only essential fields: first name, middle name, last name, user ID,
 * signatureUrn, avatarUrn, and position. If school_id is provided, only returns
 * users from that school. Otherwise, returns users from the same school as the
 * requesting user.
 *
 * Args:
 * token: The access token of the logged-in user.
 * session: The session to the database.
 * school_id: Optional school ID to filter users. If not provided, uses the
 * requesting user's school.
 *
 * Returns:
 * A list of simplified user information.
 */
export const getUsersSimpleEndpointV1UsersSimpleGet = <ThrowOnError extends boolean = false>(options?: Options<GetUsersSimpleEndpointV1UsersSimpleGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersSimpleEndpointV1UsersSimpleGetResponses, GetUsersSimpleEndpointV1UsersSimpleGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/simple',
        ...options
    });
};

/**
 * Get User Last Modified Endpoint
 * Get the last modified timestamp of the logged-in user's profile.
 *
 * Args:
 * token: The access token of the logged-in user.
 * session: The session to the database.
 *
 * Returns:
 * A dictionary containing the last modified timestamp.
 */
export const getUserLastModifiedEndpointV1UsersMeLastModifiedGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserLastModifiedEndpointV1UsersMeLastModifiedGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserLastModifiedEndpointV1UsersMeLastModifiedGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/me/last-modified',
        ...options
    });
};

/**
 * Change User Password Endpoint
 * Change the logged-in user's password with current password validation.
 *
 * Args:
 * password_change: The password change request with current and new passwords.
 * token: The access token of the logged-in user.
 * session: The session to the database.
 *
 * Returns:
 * A success message.
 */
export const changeUserPasswordEndpointV1UsersMePasswordPatch = <ThrowOnError extends boolean = false>(options: Options<ChangeUserPasswordEndpointV1UsersMePasswordPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ChangeUserPasswordEndpointV1UsersMePasswordPatchResponses, ChangeUserPasswordEndpointV1UsersMePasswordPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/me/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create School Endpoint
 * Create a new school in the system.
 */
export const createSchoolEndpointV1SchoolsCreatePost = <ThrowOnError extends boolean = false>(options: Options<CreateSchoolEndpointV1SchoolsCreatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSchoolEndpointV1SchoolsCreatePostResponses, CreateSchoolEndpointV1SchoolsCreatePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/schools/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Schools Quantity Endpoint
 * Get the total number of schools in the system.
 */
export const getSchoolsQuantityEndpointV1SchoolsQuantityGet = <ThrowOnError extends boolean = false>(options?: Options<GetSchoolsQuantityEndpointV1SchoolsQuantityGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSchoolsQuantityEndpointV1SchoolsQuantityGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/schools/quantity',
        ...options
    });
};

/**
 * Get Assigned Schools Endpoint
 * Get the list of schools assigned to the user.
 */
export const getAssignedSchoolsEndpointV1SchoolsMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetAssignedSchoolsEndpointV1SchoolsMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAssignedSchoolsEndpointV1SchoolsMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/schools/me',
        ...options
    });
};

/**
 * Get All Schools Endpoint
 * Get all schools and their information.
 *
 * Args:
 * limit: The maximum number of schools to return.
 * offset: The number of schools to skip before starting to collect the result set.
 * show_all: If True, include deactivated schools.
 */
export const getAllSchoolsEndpointV1SchoolsAllGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllSchoolsEndpointV1SchoolsAllGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllSchoolsEndpointV1SchoolsAllGetResponses, GetAllSchoolsEndpointV1SchoolsAllGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/schools/all',
        ...options
    });
};

/**
 * Delete School Info Endpoint
 * Delete a school from the system.
 */
export const deleteSchoolInfoEndpointV1SchoolsDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSchoolInfoEndpointV1SchoolsDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSchoolInfoEndpointV1SchoolsDeleteResponses, DeleteSchoolInfoEndpointV1SchoolsDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/schools/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get School Endpoint
 * Get the information of a specific school.
 */
export const getSchoolEndpointV1SchoolsGet = <ThrowOnError extends boolean = false>(options: Options<GetSchoolEndpointV1SchoolsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSchoolEndpointV1SchoolsGetResponses, GetSchoolEndpointV1SchoolsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/schools/',
        ...options
    });
};

/**
 * Update School Endpoint
 * Update the information of a specific school.
 */
export const updateSchoolEndpointV1SchoolsPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateSchoolEndpointV1SchoolsPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateSchoolEndpointV1SchoolsPatchResponses, UpdateSchoolEndpointV1SchoolsPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/schools/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete School Logo
 * Delete the school's logo image.
 */
export const deleteSchoolLogoV1SchoolsLogoDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSchoolLogoV1SchoolsLogoDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSchoolLogoV1SchoolsLogoDeleteResponses, DeleteSchoolLogoV1SchoolsLogoDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/schools/logo',
        ...options
    });
};

/**
 * Get School Logo Endpoint
 * Get the school's logo image by filename.
 */
export const getSchoolLogoEndpointV1SchoolsLogoGet = <ThrowOnError extends boolean = false>(options: Options<GetSchoolLogoEndpointV1SchoolsLogoGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSchoolLogoEndpointV1SchoolsLogoGetResponses, GetSchoolLogoEndpointV1SchoolsLogoGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/schools/logo',
        ...options
    });
};

/**
 * Patch School Logo
 */
export const patchSchoolLogoV1SchoolsLogoPatch = <ThrowOnError extends boolean = false>(options: Options<PatchSchoolLogoV1SchoolsLogoPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchSchoolLogoV1SchoolsLogoPatchResponses, PatchSchoolLogoV1SchoolsLogoPatchErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/schools/logo',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get Notification Quantity
 * Get the total number of notifications for the logged-in user.
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * show_archived: Whether to include archived notifications in the count.
 *
 * Returns:
 * int: The total number of notifications.
 */
export const getNotificationQuantityV1NotificationsQuantityGet = <ThrowOnError extends boolean = false>(options?: Options<GetNotificationQuantityV1NotificationsQuantityGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNotificationQuantityV1NotificationsQuantityGetResponses, GetNotificationQuantityV1NotificationsQuantityGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/notifications/quantity',
        ...options
    });
};

/**
 * Get Notification
 * Get a specific notification by its ID.
 *
 * Args:
 * notification_id: The ID of the notification to retrieve.
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 *
 * Returns:
 * The requested notification object.
 */
export const getNotificationV1NotificationsGet = <ThrowOnError extends boolean = false>(options: Options<GetNotificationV1NotificationsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNotificationV1NotificationsGetResponses, GetNotificationV1NotificationsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/notifications/',
        ...options
    });
};

/**
 * Archive Notification
 * Set a notification as archived (or unarchived).
 *
 * Args:
 * n: The ID of the notification to archive.
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * unarchive: If True, the notification will be unarchived instead of archived.
 *
 * Returns:
 * Notification: The archived notification object.
 */
export const archiveNotificationV1NotificationsPost = <ThrowOnError extends boolean = false>(options: Options<ArchiveNotificationV1NotificationsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ArchiveNotificationV1NotificationsPostResponses, ArchiveNotificationV1NotificationsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/notifications/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get User Notifications
 * Get all notifications for the logged-in user.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * unarchived_only: If True, only fetch unarchived notifications.
 * important_only: If True, only fetch important notifications.
 *
 * Returns:
 * A list of notification titles.
 */
export const getUserNotificationsV1NotificationsMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserNotificationsV1NotificationsMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserNotificationsV1NotificationsMeGetResponses, GetUserNotificationsV1NotificationsMeGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/notifications/me',
        ...options
    });
};

/**
 * Get All School Monthly Reports
 * Get all monthly reports of a school.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to get reports for.
 * limit: The maximum number of reports to return.
 * offset: The offset for pagination.
 *
 * Returns:
 * A list of monthly reports for the specified school that the user can view based on their role.
 */
export const getAllSchoolMonthlyReportsV1ReportsMonthlySchoolIdGet = <ThrowOnError extends boolean = false>(options: Options<GetAllSchoolMonthlyReportsV1ReportsMonthlySchoolIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllSchoolMonthlyReportsV1ReportsMonthlySchoolIdGetResponses, GetAllSchoolMonthlyReportsV1ReportsMonthlySchoolIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/monthly/{school_id}',
        ...options
    });
};

/**
 * Delete School Monthly Report
 * Delete a monthly report for a school for a specific month.
 */
export const deleteSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthDeleteResponses, DeleteSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/monthly/{school_id}/{year}/{month}',
        ...options
    });
};

/**
 * Get School Monthly Report
 * Get monthly reports of a school for a specific month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to get reports for.
 * year: The year of the report.
 * month: The month of the report.
 *
 * Returns:
 * The monthly report for the specified school, year, and month, or None if not found
 * or if the user doesn't have permission to view it based on their role.
 */
export const getSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthGet = <ThrowOnError extends boolean = false>(options: Options<GetSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthGetResponses, GetSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/monthly/{school_id}/{year}/{month}',
        ...options
    });
};

/**
 * Create School Monthly Report
 * Create or update a monthly report of a school for a specific month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to create or update the report for.
 * year: The year of the report.
 * month: The month of the report.
 * noted_by: The user who noted the report (optional).
 *
 * Returns:
 * The created or updated monthly report.
 */
export const createSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthPatch = <ThrowOnError extends boolean = false>(options: Options<CreateSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CreateSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthPatchResponses, CreateSchoolMonthlyReportV1ReportsMonthlySchoolIdYearMonthPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/monthly/{school_id}/{year}/{month}',
        ...options
    });
};

/**
 * Change Monthly Report Status
 * Change the status of a monthly report based on user role and permissions.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school the report belongs to.
 * year: The year of the report.
 * month: The month of the report.
 * status_change: The status change request containing new status and optional comments.
 *
 * Returns:
 * The updated monthly report.
 *
 * Raises:
 * HTTPException: If user doesn't have permission, report not found, or invalid transition.
 */
export const changeMonthlyReportStatusV1ReportsMonthlySchoolIdYearMonthStatusPatch = <ThrowOnError extends boolean = false>(options: Options<ChangeMonthlyReportStatusV1ReportsMonthlySchoolIdYearMonthStatusPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ChangeMonthlyReportStatusV1ReportsMonthlySchoolIdYearMonthStatusPatchResponses, ChangeMonthlyReportStatusV1ReportsMonthlySchoolIdYearMonthStatusPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/monthly/{school_id}/{year}/{month}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Valid Status Transitions
 * Get the valid status transitions for a monthly report based on user role.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school the report belongs to.
 * year: The year of the report.
 * month: The month of the report.
 *
 * Returns:
 * A dictionary containing the current status and valid transitions.
 */
export const getValidStatusTransitionsV1ReportsMonthlySchoolIdYearMonthValidTransitionsGet = <ThrowOnError extends boolean = false>(options: Options<GetValidStatusTransitionsV1ReportsMonthlySchoolIdYearMonthValidTransitionsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetValidStatusTransitionsV1ReportsMonthlySchoolIdYearMonthValidTransitionsGetResponses, GetValidStatusTransitionsV1ReportsMonthlySchoolIdYearMonthValidTransitionsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/monthly/{school_id}/{year}/{month}/valid-transitions',
        ...options
    });
};

/**
 * Delete School Daily Report
 * Delete a daily report for a school for a specific month.
 */
export const deleteSchoolDailyReportV1ReportsDailySchoolIdYearMonthDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSchoolDailyReportV1ReportsDailySchoolIdYearMonthDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSchoolDailyReportV1ReportsDailySchoolIdYearMonthDeleteResponses, DeleteSchoolDailyReportV1ReportsDailySchoolIdYearMonthDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}/{year}/{month}',
        ...options
    });
};

/**
 * Get School Daily Report
 * Get daily reports of a school for a specific month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to get reports for.
 * year: The year of the report.
 * month: The month of the report.
 *
 * Returns:
 * The daily financial report for the specified school, year, and month, or None if not found.
 */
export const getSchoolDailyReportV1ReportsDailySchoolIdYearMonthGet = <ThrowOnError extends boolean = false>(options: Options<GetSchoolDailyReportV1ReportsDailySchoolIdYearMonthGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSchoolDailyReportV1ReportsDailySchoolIdYearMonthGetResponses, GetSchoolDailyReportV1ReportsDailySchoolIdYearMonthGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}/{year}/{month}',
        ...options
    });
};

/**
 * Create School Daily Report
 * Create or update a daily report of a school for a specific month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to create or update the report for.
 * year: The year of the report.
 * month: The month of the report.
 * noted_by: The user who noted the report (optional).
 *
 * Returns:
 * The created or updated daily financial report.
 */
export const createSchoolDailyReportV1ReportsDailySchoolIdYearMonthPatch = <ThrowOnError extends boolean = false>(options: Options<CreateSchoolDailyReportV1ReportsDailySchoolIdYearMonthPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CreateSchoolDailyReportV1ReportsDailySchoolIdYearMonthPatchResponses, CreateSchoolDailyReportV1ReportsDailySchoolIdYearMonthPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}/{year}/{month}',
        ...options
    });
};

/**
 * Create School Daily Financial Report
 * Create a daily financial report for a school for a specific month.
 */
export const createSchoolDailyFinancialReportV1ReportsDailySchoolIdYearMonthPut = <ThrowOnError extends boolean = false>(options: Options<CreateSchoolDailyFinancialReportV1ReportsDailySchoolIdYearMonthPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreateSchoolDailyFinancialReportV1ReportsDailySchoolIdYearMonthPutResponses, CreateSchoolDailyFinancialReportV1ReportsDailySchoolIdYearMonthPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}/{year}/{month}',
        ...options
    });
};

/**
 * Get School Daily Report Entries
 * Get all daily report entries for a school for a specific month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to get reports for.
 * year: The year of the report.
 * month: The month of the report.
 *
 * Returns:
 * A list of daily financial report entries for the specified school, year, and month.
 */
export const getSchoolDailyReportEntriesV1ReportsDailySchoolIdYearMonthEntriesGet = <ThrowOnError extends boolean = false>(options: Options<GetSchoolDailyReportEntriesV1ReportsDailySchoolIdYearMonthEntriesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSchoolDailyReportEntriesV1ReportsDailySchoolIdYearMonthEntriesGetResponses, GetSchoolDailyReportEntriesV1ReportsDailySchoolIdYearMonthEntriesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}/{year}/{month}/entries',
        ...options
    });
};

/**
 * Create Daily Sales And Purchases Entry
 * Create a new daily sales and purchases entry for a specific day.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to create the entry for.
 * year: The year of the report.
 * month: The month of the report.
 * day: The day of the month (1-31).
 * sales: The total sales for the day.
 * purchases: The total purchases for the day.
 *
 * Returns:
 * The created daily financial report entry.
 */
export const createDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesPost = <ThrowOnError extends boolean = false>(options: Options<CreateDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesPostResponses, CreateDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}/{year}/{month}/entries',
        ...options
    });
};

/**
 * Delete Daily Sales And Purchases Entry
 * Delete a daily sales and purchases entry for a specific day.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to delete the entry for.
 * year: The year of the report.
 * month: The month of the report.
 * day: The day of the month (1-31).
 *
 * Returns:
 * A success message.
 */
export const deleteDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayDeleteResponses, DeleteDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}/{year}/{month}/entries/{day}',
        ...options
    });
};

/**
 * Get Daily Sales And Purchases Entry
 * Get a specific daily sales and purchases entry for a day.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to get the entry for.
 * year: The year of the report.
 * month: The month of the report.
 * day: The day of the month (1-31).
 *
 * Returns:
 * The daily financial report entry for the specified day.
 */
export const getDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayGet = <ThrowOnError extends boolean = false>(options: Options<GetDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayGetResponses, GetDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}/{year}/{month}/entries/{day}',
        ...options
    });
};

/**
 * Update School Daily Report Entry Legacy
 * Update daily report entries for a school for a specific month (legacy endpoint).
 *
 * This is the legacy endpoint that returns the full report. Use PUT /{school_id}/{year}/{month}/entries/{day} instead.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to update the report for.
 * year: The year of the report.
 * month: The month of the report.
 * day: The day of the report entry to update.
 * sales: The total sales for the day.
 * purchases: The total purchases for the day.
 *
 * Returns:
 * The updated daily financial report.
 */
export const updateSchoolDailyReportEntryLegacyV1ReportsDailySchoolIdYearMonthEntriesDayPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateSchoolDailyReportEntryLegacyV1ReportsDailySchoolIdYearMonthEntriesDayPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateSchoolDailyReportEntryLegacyV1ReportsDailySchoolIdYearMonthEntriesDayPatchResponses, UpdateSchoolDailyReportEntryLegacyV1ReportsDailySchoolIdYearMonthEntriesDayPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}/{year}/{month}/entries/{day}',
        ...options
    });
};

/**
 * Update Daily Sales And Purchases Entry
 * Update an existing daily sales and purchases entry for a specific day.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to update the entry for.
 * year: The year of the report.
 * month: The month of the report.
 * day: The day of the month (1-31).
 * sales: The total sales for the day.
 * purchases: The total purchases for the day.
 *
 * Returns:
 * The updated daily financial report entry.
 */
export const updateDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayPut = <ThrowOnError extends boolean = false>(options: Options<UpdateDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayPutResponses, UpdateDailySalesAndPurchasesEntryV1ReportsDailySchoolIdYearMonthEntriesDayPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}/{year}/{month}/entries/{day}',
        ...options
    });
};

/**
 * Get School Daily Financial Reports
 * Get daily financial reports of a specific school.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to get reports for.
 * offset: The offset for pagination.
 * limit: The maximum number of reports to return.
 *
 * Returns:
 * A list of daily financial reports for the specified school.
 */
export const getSchoolDailyFinancialReportsV1ReportsDailySchoolIdGet = <ThrowOnError extends boolean = false>(options: Options<GetSchoolDailyFinancialReportsV1ReportsDailySchoolIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSchoolDailyFinancialReportsV1ReportsDailySchoolIdGetResponses, GetSchoolDailyFinancialReportsV1ReportsDailySchoolIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}',
        ...options
    });
};

/**
 * Get School Daily Financial Report With Entries
 * Get daily financial report with all entries for a school for a specific month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to get the report for.
 * year: The year of the report.
 * month: The month of the report.
 *
 * Returns:
 * A tuple containing the daily financial report and its entries for the specified school, year, and month.
 */
export const getSchoolDailyFinancialReportWithEntriesV1ReportsDailySchoolIdYearMonthFullGet = <ThrowOnError extends boolean = false>(options: Options<GetSchoolDailyFinancialReportWithEntriesV1ReportsDailySchoolIdYearMonthFullGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSchoolDailyFinancialReportWithEntriesV1ReportsDailySchoolIdYearMonthFullGetResponses, GetSchoolDailyFinancialReportWithEntriesV1ReportsDailySchoolIdYearMonthFullGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}/{year}/{month}/full',
        ...options
    });
};

/**
 * Create Bulk Daily Sales And Purchases Entries
 * Create multiple daily sales and purchases entries at once.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to create entries for.
 * year: The year of the report.
 * month: The month of the report.
 * entries: List of entries with 'day', 'sales', and 'purchases' fields.
 *
 * Returns:
 * List of created daily financial report entries.
 */
export const createBulkDailySalesAndPurchasesEntriesV1ReportsDailySchoolIdYearMonthEntriesBulkPost = <ThrowOnError extends boolean = false>(options: Options<CreateBulkDailySalesAndPurchasesEntriesV1ReportsDailySchoolIdYearMonthEntriesBulkPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateBulkDailySalesAndPurchasesEntriesV1ReportsDailySchoolIdYearMonthEntriesBulkPostResponses, CreateBulkDailySalesAndPurchasesEntriesV1ReportsDailySchoolIdYearMonthEntriesBulkPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}/{year}/{month}/entries/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Daily Sales And Purchases Summary
 * Get a summary of daily sales and purchases for a specific month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to get the summary for.
 * year: The year of the report.
 * month: The month of the report.
 *
 * Returns:
 * Summary statistics including totals, averages, and entry count.
 */
export const getDailySalesAndPurchasesSummaryV1ReportsDailySchoolIdYearMonthSummaryGet = <ThrowOnError extends boolean = false>(options: Options<GetDailySalesAndPurchasesSummaryV1ReportsDailySchoolIdYearMonthSummaryGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDailySalesAndPurchasesSummaryV1ReportsDailySchoolIdYearMonthSummaryGetResponses, GetDailySalesAndPurchasesSummaryV1ReportsDailySchoolIdYearMonthSummaryGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}/{year}/{month}/summary',
        ...options
    });
};

/**
 * Get Daily Sales And Purchases Summary Filtered
 * Get a summary of daily sales and purchases for a specific month with status filtering.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to get the summary for.
 * year: The year of the report.
 * month: The month of the report.
 * include_drafts: Whether to include draft reports.
 * include_reviews: Whether to include reports under review.
 * include_approved: Whether to include approved reports.
 * include_rejected: Whether to include rejected reports.
 * include_received: Whether to include received reports.
 * include_archived: Whether to include archived reports.
 *
 * Returns:
 * Summary statistics including totals, averages, and entry count from filtered reports.
 */
export const getDailySalesAndPurchasesSummaryFilteredV1ReportsDailySchoolIdYearMonthSummaryFilteredGet = <ThrowOnError extends boolean = false>(options: Options<GetDailySalesAndPurchasesSummaryFilteredV1ReportsDailySchoolIdYearMonthSummaryFilteredGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDailySalesAndPurchasesSummaryFilteredV1ReportsDailySchoolIdYearMonthSummaryFilteredGetResponses, GetDailySalesAndPurchasesSummaryFilteredV1ReportsDailySchoolIdYearMonthSummaryFilteredGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}/{year}/{month}/summary/filtered',
        ...options
    });
};

/**
 * Change Daily Report Status
 * Change the status of a daily financial report based on user role and permissions.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school the report belongs to.
 * year: The year of the report.
 * month: The month of the report.
 * status_change: The status change request containing new status and optional comments.
 *
 * Returns:
 * The updated daily financial report.
 *
 * Raises:
 * HTTPException: If user doesn't have permission, report not found, or invalid transition.
 */
export const changeDailyReportStatusV1ReportsDailySchoolIdYearMonthStatusPatch = <ThrowOnError extends boolean = false>(options: Options<ChangeDailyReportStatusV1ReportsDailySchoolIdYearMonthStatusPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ChangeDailyReportStatusV1ReportsDailySchoolIdYearMonthStatusPatchResponses, ChangeDailyReportStatusV1ReportsDailySchoolIdYearMonthStatusPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}/{year}/{month}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Daily Valid Status Transitions
 * Get the valid status transitions for a daily financial report based on user role.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school the report belongs to.
 * year: The year of the report.
 * month: The month of the report.
 *
 * Returns:
 * A dictionary containing the current status and valid transitions.
 */
export const getDailyValidStatusTransitionsV1ReportsDailySchoolIdYearMonthValidTransitionsGet = <ThrowOnError extends boolean = false>(options: Options<GetDailyValidStatusTransitionsV1ReportsDailySchoolIdYearMonthValidTransitionsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDailyValidStatusTransitionsV1ReportsDailySchoolIdYearMonthValidTransitionsGetResponses, GetDailyValidStatusTransitionsV1ReportsDailySchoolIdYearMonthValidTransitionsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/daily/{school_id}/{year}/{month}/valid-transitions',
        ...options
    });
};

/**
 * Delete School Payroll Report
 * Delete a payroll report for a school for a specific month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to delete the report for.
 * year: The year of the report.
 * month: The month of the report.
 *
 * Returns:
 * A confirmation message.
 *
 * Raises:
 * HTTPException: If the user is not found, lacks permission, or the report is not found.
 */
export const deleteSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthDeleteResponses, DeleteSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/payroll/{school_id}/{year}/{month}',
        ...options
    });
};

/**
 * Get School Payroll Report
 * Get payroll report of a school for a specific month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to get reports for.
 * year: The year of the report.
 * month: The month of the report.
 *
 * Returns:
 * The payroll report for the specified school, year, and month.
 *
 * Raises:
 * HTTPException: If the user is not found, lacks permission, or the report is not found.
 */
export const getSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthGet = <ThrowOnError extends boolean = false>(options: Options<GetSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthGetResponses, GetSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/payroll/{school_id}/{year}/{month}',
        ...options
    });
};

/**
 * Create School Payroll Report
 * Create or update a payroll report of a school for a specific month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to create or update the report for.
 * year: The year of the report.
 * month: The month of the report.
 * noted_by: The user who noted the report (optional).
 *
 * Returns:
 * The created or updated payroll report.
 *
 * Raises:
 * HTTPException: If the user is not found or lacks permission.
 */
export const createSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthPatch = <ThrowOnError extends boolean = false>(options: Options<CreateSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CreateSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthPatchResponses, CreateSchoolPayrollReportV1ReportsPayrollSchoolIdYearMonthPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/payroll/{school_id}/{year}/{month}',
        ...options
    });
};

/**
 * Update Payroll Report
 * Update payroll report metadata for a school for a specific month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to update the report for.
 * year: The year of the report.
 * month: The month of the report.
 * update_data: The fields to update.
 *
 * Returns:
 * The updated payroll report.
 *
 * Raises:
 * HTTPException: If the user is not found, lacks permission, or the report is not found.
 */
export const updatePayrollReportV1ReportsPayrollSchoolIdYearMonthPut = <ThrowOnError extends boolean = false>(options: Options<UpdatePayrollReportV1ReportsPayrollSchoolIdYearMonthPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePayrollReportV1ReportsPayrollSchoolIdYearMonthPutResponses, UpdatePayrollReportV1ReportsPayrollSchoolIdYearMonthPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/payroll/{school_id}/{year}/{month}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get School Payroll Report Entries
 * Get all payroll report entries for a school for a specific month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to get reports for.
 * year: The year of the report.
 * month: The month of the report.
 *
 * Returns:
 * A list of payroll report entries for the specified school, year, and month.
 *
 * Raises:
 * HTTPException: If the user is not found, lacks permission, or the report is not found.
 */
export const getSchoolPayrollReportEntriesV1ReportsPayrollSchoolIdYearMonthEntriesGet = <ThrowOnError extends boolean = false>(options: Options<GetSchoolPayrollReportEntriesV1ReportsPayrollSchoolIdYearMonthEntriesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSchoolPayrollReportEntriesV1ReportsPayrollSchoolIdYearMonthEntriesGetResponses, GetSchoolPayrollReportEntriesV1ReportsPayrollSchoolIdYearMonthEntriesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/payroll/{school_id}/{year}/{month}/entries',
        ...options
    });
};

/**
 * Create Payroll Report Entry
 * Create a new payroll report entry for a school for a specific month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to create the entry for.
 * year: The year of the report.
 * month: The month of the report.
 * entry_data: The payroll entry data.
 *
 * Returns:
 * The created payroll report entry.
 *
 * Raises:
 * HTTPException: If the user is not found, lacks permission, or the report is not found.
 */
export const createPayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesPost = <ThrowOnError extends boolean = false>(options: Options<CreatePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesPostResponses, CreatePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/payroll/{school_id}/{year}/{month}/entries',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Bulk Payroll Report Entries
 * Create multiple payroll report entries at once.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to create entries for.
 * year: The year of the report.
 * month: The month of the report.
 * entries: List of payroll entry data.
 *
 * Returns:
 * List of created payroll report entries.
 *
 * Raises:
 * HTTPException: If the user is not found, lacks permission, or the report is not found.
 */
export const createBulkPayrollReportEntriesV1ReportsPayrollSchoolIdYearMonthEntriesBulkPost = <ThrowOnError extends boolean = false>(options: Options<CreateBulkPayrollReportEntriesV1ReportsPayrollSchoolIdYearMonthEntriesBulkPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateBulkPayrollReportEntriesV1ReportsPayrollSchoolIdYearMonthEntriesBulkPostResponses, CreateBulkPayrollReportEntriesV1ReportsPayrollSchoolIdYearMonthEntriesBulkPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/payroll/{school_id}/{year}/{month}/entries/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Payroll Report Entry
 * Delete a payroll report entry for a school for a specific month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to delete the entry for.
 * year: The year of the report.
 * month: The month of the report.
 * week_number: The week number in the month.
 * employee_name: The employee name.
 *
 * Returns:
 * A confirmation message.
 *
 * Raises:
 * HTTPException: If the user is not found, lacks permission, or the entry is not found.
 */
export const deletePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesWeekNumberEmployeeNameDelete = <ThrowOnError extends boolean = false>(options: Options<DeletePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesWeekNumberEmployeeNameDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesWeekNumberEmployeeNameDeleteResponses, DeletePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesWeekNumberEmployeeNameDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/payroll/{school_id}/{year}/{month}/entries/{week_number}/{employee_name}',
        ...options
    });
};

/**
 * Update Payroll Report Entry
 * Update an existing payroll report entry for a school for a specific month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to update the entry for.
 * year: The year of the report.
 * month: The month of the report.
 * week_number: The week number in the month.
 * employee_name: The employee name.
 * entry_data: The updated entry data.
 *
 * Returns:
 * The updated payroll report entry.
 *
 * Raises:
 * HTTPException: If the user is not found, lacks permission, or the entry is not found.
 */
export const updatePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesWeekNumberEmployeeNamePut = <ThrowOnError extends boolean = false>(options: Options<UpdatePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesWeekNumberEmployeeNamePutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesWeekNumberEmployeeNamePutResponses, UpdatePayrollReportEntryV1ReportsPayrollSchoolIdYearMonthEntriesWeekNumberEmployeeNamePutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/payroll/{school_id}/{year}/{month}/entries/{week_number}/{employee_name}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Change Payroll Report Status
 * Change the status of a payroll report based on user role and permissions.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school the report belongs to.
 * year: The year of the report.
 * month: The month of the report.
 * status_change: The status change request containing new status and optional comments.
 *
 * Returns:
 * The updated payroll report.
 *
 * Raises:
 * HTTPException: If user doesn't have permission, report not found, or invalid transition.
 */
export const changePayrollReportStatusV1ReportsPayrollSchoolIdYearMonthStatusPatch = <ThrowOnError extends boolean = false>(options: Options<ChangePayrollReportStatusV1ReportsPayrollSchoolIdYearMonthStatusPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ChangePayrollReportStatusV1ReportsPayrollSchoolIdYearMonthStatusPatchResponses, ChangePayrollReportStatusV1ReportsPayrollSchoolIdYearMonthStatusPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/payroll/{school_id}/{year}/{month}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Payroll Valid Status Transitions
 * Get the valid status transitions for a payroll report based on user role.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school the report belongs to.
 * year: The year of the report.
 * month: The month of the report.
 *
 * Returns:
 * A dictionary containing the current status and valid transitions.
 */
export const getPayrollValidStatusTransitionsV1ReportsPayrollSchoolIdYearMonthValidTransitionsGet = <ThrowOnError extends boolean = false>(options: Options<GetPayrollValidStatusTransitionsV1ReportsPayrollSchoolIdYearMonthValidTransitionsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPayrollValidStatusTransitionsV1ReportsPayrollSchoolIdYearMonthValidTransitionsGetResponses, GetPayrollValidStatusTransitionsV1ReportsPayrollSchoolIdYearMonthValidTransitionsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/payroll/{school_id}/{year}/{month}/valid-transitions',
        ...options
    });
};

/**
 * Delete Liquidation Report
 * Delete a liquidation report for a specific category, school, and month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to delete the report for.
 * year: The year of the report.
 * month: The month of the report.
 * category: The liquidation report category.
 */
export const deleteLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryDeleteResponses, DeleteLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/liquidation/{school_id}/{year}/{month}/{category}',
        ...options
    });
};

/**
 * Get Liquidation Report
 * Get a liquidation report for a specific category, school, and month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to get the report for.
 * year: The year of the report.
 * month: The month of the report.
 * category: The liquidation report category.
 *
 * Returns:
 * The liquidation report for the specified parameters.
 */
export const getLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryGet = <ThrowOnError extends boolean = false>(options: Options<GetLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryGetResponses, GetLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/liquidation/{school_id}/{year}/{month}/{category}',
        ...options
    });
};

/**
 * Create Or Update Liquidation Report
 * Create or update a liquidation report for a specific category, school, and month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to create/update the report for.
 * year: The year of the report.
 * month: The month of the report.
 * category: The liquidation report category.
 * request_data: The liquidation report data.
 *
 * Returns:
 * The created or updated liquidation report.
 */
export const createOrUpdateLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryPatch = <ThrowOnError extends boolean = false>(options: Options<CreateOrUpdateLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CreateOrUpdateLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryPatchResponses, CreateOrUpdateLiquidationReportV1ReportsLiquidationSchoolIdYearMonthCategoryPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/liquidation/{school_id}/{year}/{month}/{category}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Liquidation Report Entries
 * Get all liquidation report entries for a specific category, school, and month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to get entries for.
 * year: The year of the report.
 * month: The month of the report.
 * category: The liquidation report category.
 *
 * Returns:
 * A list of liquidation report entries.
 */
export const getLiquidationReportEntriesV1ReportsLiquidationSchoolIdYearMonthCategoryEntriesGet = <ThrowOnError extends boolean = false>(options: Options<GetLiquidationReportEntriesV1ReportsLiquidationSchoolIdYearMonthCategoryEntriesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLiquidationReportEntriesV1ReportsLiquidationSchoolIdYearMonthCategoryEntriesGetResponses, GetLiquidationReportEntriesV1ReportsLiquidationSchoolIdYearMonthCategoryEntriesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/liquidation/{school_id}/{year}/{month}/{category}/entries',
        ...options
    });
};

/**
 * Update Liquidation Report Entries
 * Update liquidation report entries for a specific category, school, and month.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school to update entries for.
 * year: The year of the report.
 * month: The month of the report.
 * category: The liquidation report category.
 * entries: The new entries data.
 *
 * Returns:
 * The updated entries.
 */
export const updateLiquidationReportEntriesV1ReportsLiquidationSchoolIdYearMonthCategoryEntriesPut = <ThrowOnError extends boolean = false>(options: Options<UpdateLiquidationReportEntriesV1ReportsLiquidationSchoolIdYearMonthCategoryEntriesPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateLiquidationReportEntriesV1ReportsLiquidationSchoolIdYearMonthCategoryEntriesPutResponses, UpdateLiquidationReportEntriesV1ReportsLiquidationSchoolIdYearMonthCategoryEntriesPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/liquidation/{school_id}/{year}/{month}/{category}/entries',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Liquidation Categories
 * Get all available liquidation report categories.
 *
 * Returns:
 * A dictionary of available categories with their configurations.
 */
export const getLiquidationCategoriesV1ReportsLiquidationCategoriesGet = <ThrowOnError extends boolean = false>(options?: Options<GetLiquidationCategoriesV1ReportsLiquidationCategoriesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLiquidationCategoriesV1ReportsLiquidationCategoriesGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/liquidation/categories',
        ...options
    });
};

/**
 * Change Liquidation Report Status
 * Change the status of a liquidation report based on user role and permissions.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school the report belongs to.
 * year: The year of the report.
 * month: The month of the report.
 * category: The category of liquidation report.
 * status_change: The status change request containing new status and optional comments.
 *
 * Returns:
 * The updated liquidation report.
 *
 * Raises:
 * HTTPException: If user doesn't have permission, report not found, or invalid transition.
 */
export const changeLiquidationReportStatusV1ReportsLiquidationSchoolIdYearMonthCategoryStatusPatch = <ThrowOnError extends boolean = false>(options: Options<ChangeLiquidationReportStatusV1ReportsLiquidationSchoolIdYearMonthCategoryStatusPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ChangeLiquidationReportStatusV1ReportsLiquidationSchoolIdYearMonthCategoryStatusPatchResponses, ChangeLiquidationReportStatusV1ReportsLiquidationSchoolIdYearMonthCategoryStatusPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/liquidation/{school_id}/{year}/{month}/{category}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Liquidation Valid Status Transitions
 * Get the valid status transitions for a liquidation report based on user role.
 *
 * Args:
 * token: The decoded JWT token of the logged-in user.
 * session: The database session.
 * school_id: The ID of the school the report belongs to.
 * year: The year of the report.
 * month: The month of the report.
 * category: The category of liquidation report.
 *
 * Returns:
 * A dictionary containing the current status and valid transitions.
 */
export const getLiquidationValidStatusTransitionsV1ReportsLiquidationSchoolIdYearMonthCategoryValidTransitionsGet = <ThrowOnError extends boolean = false>(options: Options<GetLiquidationValidStatusTransitionsV1ReportsLiquidationSchoolIdYearMonthCategoryValidTransitionsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLiquidationValidStatusTransitionsV1ReportsLiquidationSchoolIdYearMonthCategoryValidTransitionsGetResponses, GetLiquidationValidStatusTransitionsV1ReportsLiquidationSchoolIdYearMonthCategoryValidTransitionsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/liquidation/{school_id}/{year}/{month}/{category}/valid-transitions',
        ...options
    });
};

/**
 * Upload Attachment Endpoint
 * Upload a receipt attachment for report entries.
 *
 * Args:
 * token: The access token of the logged-in user.
 * session: The session to the database.
 * file: The receipt image file to upload.
 * description: Optional description of the attachment.
 *
 * Returns:
 * AttachmentUploadResponse with file details.
 */
export const uploadAttachmentEndpointV1ReportsAttachmentsUploadPost = <ThrowOnError extends boolean = false>(options: Options<UploadAttachmentEndpointV1ReportsAttachmentsUploadPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadAttachmentEndpointV1ReportsAttachmentsUploadPostResponses, UploadAttachmentEndpointV1ReportsAttachmentsUploadPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/attachments/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Delete Attachment Endpoint
 * Delete a receipt attachment.
 *
 * Args:
 * file_urn: The URN of the attachment to delete.
 * token: The access token of the logged-in user.
 * session: The session to the database.
 *
 * Returns:
 * Success message.
 */
export const deleteAttachmentEndpointV1ReportsAttachmentsFileUrnDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteAttachmentEndpointV1ReportsAttachmentsFileUrnDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAttachmentEndpointV1ReportsAttachmentsFileUrnDeleteResponses, DeleteAttachmentEndpointV1ReportsAttachmentsFileUrnDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/attachments/{file_urn}',
        ...options
    });
};

/**
 * Get Attachment Endpoint
 * Get a receipt attachment.
 *
 * Args:
 * file_urn: The URN of the attachment to retrieve.
 * token: The access token of the logged-in user.
 * session: The session to the database.
 *
 * Returns:
 * StreamingResponse with the attachment file.
 */
export const getAttachmentEndpointV1ReportsAttachmentsFileUrnGet = <ThrowOnError extends boolean = false>(options: Options<GetAttachmentEndpointV1ReportsAttachmentsFileUrnGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAttachmentEndpointV1ReportsAttachmentsFileUrnGetResponses, GetAttachmentEndpointV1ReportsAttachmentsFileUrnGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/attachments/{file_urn}',
        ...options
    });
};

/**
 * Get Attachments Metadata Endpoint
 * Get metadata for a list of receipt attachments.
 *
 * Args:
 * file_urns: The list of URNs of the attachments to retrieve metadata for.
 * token: The access token of the logged-in user.
 * session: The session to the database.
 *
 * Returns:
 * List of metadata dictionaries for the requested attachments.
 */
export const getAttachmentsMetadataEndpointV1ReportsAttachmentsMetadataPost = <ThrowOnError extends boolean = false>(options: Options<GetAttachmentsMetadataEndpointV1ReportsAttachmentsMetadataPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetAttachmentsMetadataEndpointV1ReportsAttachmentsMetadataPostResponses, GetAttachmentsMetadataEndpointV1ReportsAttachmentsMetadataPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reports/attachments/metadata',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Root
 * Always returns a 200 OK response with a message.
 */
export const rootV1HealthcheckGet = <ThrowOnError extends boolean = false>(options?: Options<RootV1HealthcheckGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RootV1HealthcheckGetResponses, unknown, ThrowOnError>({
        url: '/v1/healthcheck',
        ...options
    });
};

/**
 * Get Server Config
 * Get the current server configuration (excluding sensitive data).
 */
export const getServerConfigV1AdminConfigGet = <ThrowOnError extends boolean = false>(options?: Options<GetServerConfigV1AdminConfigGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetServerConfigV1AdminConfigGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/admin/config',
        ...options
    });
};

/**
 * Update Server Config
 * Update the server configuration.
 */
export const updateServerConfigV1AdminConfigPut = <ThrowOnError extends boolean = false>(options: Options<UpdateServerConfigV1AdminConfigPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateServerConfigV1AdminConfigPutResponses, UpdateServerConfigV1AdminConfigPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/admin/config',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};